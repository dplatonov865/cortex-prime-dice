import React from 'react';
import DiceIcon from './DiceIcon';
import { DISTINCTION_OPTIONS } from '../constants/distinctions';

const DistinctionBlock = ({ distinctions, onDistinctionClick, onDistinctionChange, getUsageCount, isUsageLimitReached, additionalDieEffect = false }) => {
  const handleDistinctionClick = (distinctionName, diceType, category) => {
    if (isUsageLimitReached && isUsageLimitReached('distinction', `${category}:${distinctionName}`) && !additionalDieEffect) {
      return;
    }
    onDistinctionClick(distinctionName, diceType, category);
  };

  const handleNameChange = (category, newName) => {
    onDistinctionChange(category, newName);
  };

  return (
    <div className={`block distinctions-block ${additionalDieEffect ? 'bonus-mode' : ''}`}>
      <h3>–û—Ç–ª–∏—á–∏—è</h3>
      <div className="distinctions-list">
        {Object.entries(distinctions).map(([category, distinction]) => {
          const usageCountD8 = getUsageCount ? getUsageCount('distinction', `${getCategoryTitle(category)} (d8):${distinction.name}`) : 0;
          const usageCountD4 = getUsageCount ? getUsageCount('distinction', `${getCategoryTitle(category)} (d4):${distinction.name}`) : 0;

          const isLimitReachedD8 = isUsageLimitReached && isUsageLimitReached('distinction', `${getCategoryTitle(category)} (d8):${distinction.name}`);
          const isLimitReachedD4 = isUsageLimitReached && isUsageLimitReached('distinction', `${getCategoryTitle(category)} (d4):${distinction.name}`);

          const isClickableD8 = !isLimitReachedD8 || additionalDieEffect;
          const isClickableD4 = !isLimitReachedD4 || additionalDieEffect;

          return (
            <div key={category} className="distinction-category">
              <h4 className="distinction-title">{getCategoryTitle(category)}</h4>
              <div className="distinction-row">
                <select
                  className="distinction-select"
                  value={distinction.name}
                  onChange={(e) => handleNameChange(category, e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ {getCategoryTitle(category).toLowerCase()}...</option>
                  {DISTINCTION_OPTIONS.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>

                <div className="distinction-dice">
                  <div
                    className={`distinction-dice-item ${!isClickableD8 ? 'dice-disabled' : ''}`}
                    onClick={() => handleDistinctionClick(
                      distinction.name,
                      'd8',
                      `${getCategoryTitle(category)} (d8)`
                    )}
                    title={
                      !isClickableD8
                        ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                        : additionalDieEffect
                          ? '–≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª'
                          : `–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d8 –≤ –ø—É–ª (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usageCountD8}/3)`
                    }
                  >
                    <DiceIcon
                      type="d8"
                      value="8"
                      clickable={isClickableD8}
                    />
                    {usageCountD8 > 0 && (
                      <span className="usage-counter-small">X{usageCountD8}</span>
                    )}
                  </div>

                  <div
                    className={`distinction-dice-item ${!isClickableD4 ? 'dice-disabled' : ''}`}
                    onClick={() => handleDistinctionClick(
                      distinction.name,
                      'd4',
                      `${getCategoryTitle(category)} (d4)`
                    )}
                    title={
                      !isClickableD4
                        ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                        : additionalDieEffect
                          ? '–≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª'
                          : `–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d4 –≤ –ø—É–ª (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usageCountD4}/3)`
                    }
                  >
                    <DiceIcon
                      type="d4"
                      value="4"
                      clickable={isClickableD4}
                    />
                    {usageCountD4 > 0 && (
                      <span className="usage-counter-small">X{usageCountD4}</span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
      <div className="distinction-hint">
        {additionalDieEffect
          ? 'üéØ –≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–æ–µ –æ—Ç–ª–∏—á–∏–µ'
          : 'üí° –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∫—É–±—ã –≤ –ø—É–ª (–º–∞–∫—Å. 3 —Ä–∞–∑–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –∫—É–±)'
        }
      </div>
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const getCategoryTitle = (category) => {
  const titles = {
    'past': '–ü–µ—Ä–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ',
    'trait': '–í—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–∏–µ',
    'value': '–¢—Ä–µ—Ç—å–µ –æ—Ç–ª–∏—á–∏–µ'
  };
  return titles[category] || category;
};

export default DistinctionBlock;