import React from 'react';
import DiceIcon from './DiceIcon';
import { DISTINCTION_GROUPS, getDistinctionGroup } from '../constants/distinctions';

const DistinctionBlock = ({
  distinctions,
  onDistinctionClick,
  onDistinctionChange,
  getUsageCount,
  isUsageLimitReached,
  usedDistinctionGroups,
  additionalDieEffect = false
}) => {
  const handleDistinctionClick = (distinctionName, diceType, category) => {
    if (isUsageLimitReached && isUsageLimitReached('distinction', `${category}:${distinctionName}`) && !additionalDieEffect) {
      return;
    }
    onDistinctionClick(distinctionName, diceType, category);
  };

  const handleNameChange = (category, newName) => {
    onDistinctionChange(category, newName);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getAvailableOptions = (currentCategory, currentValue) => {
    const allOptions = Object.values(DISTINCTION_GROUPS).flatMap(group => group.options);

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏
    if (additionalDieEffect) {
      return allOptions;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const otherCategories = Object.entries(distinctions)
      .filter(([categoryKey]) => categoryKey !== currentCategory)
      .map(([_, distinction]) => distinction.name)
      .filter(name => name && name !== '');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ—Ç–ª–∏—á–∏—è–º–∏
    const usedGroups = new Set();
    otherCategories.forEach(distinctionName => {
      const group = getDistinctionGroup(distinctionName);
      if (group) {
        usedGroups.add(group);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ usedDistinctionGroups
    if (usedDistinctionGroups) {
      usedDistinctionGroups.forEach(group => usedGroups.add(group));
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—Ü–∏–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø + —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const availableOptions = allOptions.filter(option => {
      const optionGroup = getDistinctionGroup(option.value);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –µ—Å–ª–∏:
      // 1. –≠—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      // 2. –ì—Ä—É–ø–ø–∞ –æ–ø—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ—Ç–ª–∏—á–∏—è–º–∏
      // 3. –ì—Ä—É–ø–ø–∞ –æ–ø—Ü–∏–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ usedDistinctionGroups
      return option.value === currentValue || !usedGroups.has(optionGroup);
    });

    return availableOptions;
  };

  return (
    <div className={`block distinctions-block ${additionalDieEffect ? 'bonus-mode' : ''}`}>
      <h3>–û—Ç–ª–∏—á–∏—è</h3>
      <div className="distinctions-list">
        {Object.entries(distinctions).map(([category, distinction]) => {
          const usageCountD8 = getUsageCount ? getUsageCount('distinction', `${getCategoryTitle(category)} (d8):${distinction.name}`) : 0;
          const usageCountD4 = getUsageCount ? getUsageCount('distinction', `${getCategoryTitle(category)} (d4):${distinction.name}`) : 0;

          const isLimitReachedD8 = isUsageLimitReached && isUsageLimitReached('distinction', `${getCategoryTitle(category)} (d8):${distinction.name}`);
          const isLimitReachedD4 = isUsageLimitReached && isUsageLimitReached('distinction', `${getCategoryTitle(category)} (d4):${distinction.name}`);

          const isClickableD8 = !isLimitReachedD8 || additionalDieEffect;
          const isClickableD4 = !isLimitReachedD4 || additionalDieEffect;

          const availableOptions = getAvailableOptions(category, distinction.name);

          return (
            <div key={category} className="distinction-category">
              <h4 className="distinction-title">{getCategoryTitle(category)}</h4>
              <div className="distinction-row">
                <select
                  className="distinction-select"
                  value={distinction.name}
                  onChange={(e) => handleNameChange(category, e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ {getCategoryTitle(category).toLowerCase()}...</option>
                  {availableOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>

                <div className="distinction-dice">
                  <div
                    className={`distinction-dice-item ${!isClickableD8 ? 'dice-disabled' : ''}`}
                    onClick={() => handleDistinctionClick(
                      distinction.name,
                      'd8',
                      `${getCategoryTitle(category)} (d8)`
                    )}
                    title={
                      !isClickableD8
                        ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                        : additionalDieEffect
                          ? '–≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª'
                          : `–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d8 –≤ –ø—É–ª (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usageCountD8}/3)`
                    }
                  >
                    <DiceIcon
                      type="d8"
                      value="8"
                      clickable={isClickableD8}
                    />
                    {usageCountD8 > 0 && (
                      <span className="usage-counter-small">X{usageCountD8}</span>
                    )}
                  </div>

                  <div
                    className={`distinction-dice-item ${!isClickableD4 ? 'dice-disabled' : ''}`}
                    onClick={() => handleDistinctionClick(
                      distinction.name,
                      'd4',
                      `${getCategoryTitle(category)} (d4)`
                    )}
                    title={
                      !isClickableD4
                        ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                        : additionalDieEffect
                          ? '–≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª'
                          : `–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d4 –≤ –ø—É–ª (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usageCountD4}/3)`
                    }
                  >
                    <DiceIcon
                      type="d4"
                      value="4"
                      clickable={isClickableD4}
                    />
                    {usageCountD4 > 0 && (
                      <span className="usage-counter-small">X{usageCountD4}</span>
                    )}
                  </div>
                </div>
              </div>
              {availableOptions.length === 1 && distinction.name && (
                <div className="distinction-warning">
                  ‚ö†Ô∏è –í—Å–µ –≥—Ä—É–ø–ø—ã –æ—Ç–ª–∏—á–∏–π —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
                </div>
              )}
            </div>
          );
        })}
      </div>
      <div className="distinction-hint">
        {additionalDieEffect
          ? 'üéØ –≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–æ–µ –æ—Ç–ª–∏—á–∏–µ'
          : 'üí° –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–ª–∏—á–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã, –¥—Ä—É–≥–∏–µ –æ—Ç–ª–∏—á–∏—è –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.'
        }
      </div>
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const getCategoryTitle = (category) => {
  const titles = {
    'past': '–ü–µ—Ä–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ',
    'trait': '–í—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–∏–µ',
    'value': '–¢—Ä–µ—Ç—å–µ –æ—Ç–ª–∏—á–∏–µ'
  };
  return titles[category] || category;
};

export default DistinctionBlock;