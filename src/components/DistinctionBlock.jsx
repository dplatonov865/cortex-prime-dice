import React from 'react';
import DiceIcon from './DiceIcon';
import { DISTINCTION_GROUPS, getDistinctionGroup } from '../constants/distinctions';

const DistinctionBlock = ({
  distinctions,
  onTraitClick,
  onDistinctionChange,
  getUsageCount,
  isUsageLimitReached,
  usedDistinctionGroups,
  additionalDieEffect = false
}) => {
  const handleDistinctionClick = (distinctionId, distinctionName) => {
    if (isUsageLimitReached && isUsageLimitReached('distinctions', distinctionName) && !additionalDieEffect) {
      return;
    }
    onTraitClick(distinctionId, distinctionName, 'd8', 'distinctions');
  };

  const handleNameChange = (distinctionId, newName) => {
    onDistinctionChange(distinctionId, { name: newName });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –æ—Ç–ª–∏—á–∏—è
  const getAvailableOptions = (currentDistinctionId, currentValue) => {
    const allOptions = Object.values(DISTINCTION_GROUPS).flatMap(group => group.options);

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏
    if (additionalDieEffect) {
      return allOptions;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–ª–æ—Ç–æ–≤
    const otherDistinctions = Object.entries(distinctions)
      .filter(([distinctionId]) => distinctionId !== currentDistinctionId)
      .map(([_, distinction]) => distinction.name)
      .filter(name => name && name !== '');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ—Ç–ª–∏—á–∏—è–º–∏
    const usedGroups = new Set();
    otherDistinctions.forEach(distinctionName => {
      const group = getDistinctionGroup(distinctionName);
      if (group) {
        usedGroups.add(group);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ usedDistinctionGroups
    if (usedDistinctionGroups) {
      usedDistinctionGroups.forEach(group => usedGroups.add(group));
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—Ü–∏–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø + —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const availableOptions = allOptions.filter(option => {
      const optionGroup = getDistinctionGroup(option.value);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –µ—Å–ª–∏:
      // 1. –≠—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      // 2. –ì—Ä—É–ø–ø–∞ –æ–ø—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ—Ç–ª–∏—á–∏—è–º–∏
      // 3. –ì—Ä—É–ø–ø–∞ –æ–ø—Ü–∏–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ usedDistinctionGroups
      return option.value === currentValue || !usedGroups.has(optionGroup);
    });

    return availableOptions;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç–ª–∏—á–∏—è –ø–æ ID
  const getDistinctionTitle = (distinctionId) => {
    const titles = {
      '1': '–ü–µ—Ä–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ',
      '2': '–í—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–∏–µ',
      '3': '–¢—Ä–µ—Ç—å–µ –æ—Ç–ª–∏—á–∏–µ'
    };
    return titles[distinctionId] || `–û—Ç–ª–∏—á–∏–µ ${distinctionId}`;
  };

  return (
    <div className={`block distinctions-block ${additionalDieEffect ? 'bonus-mode' : ''}`}>
      <h3>–û—Ç–ª–∏—á–∏—è</h3>
      <div className="distinctions-list">
        {Object.entries(distinctions).map(([distinctionId, distinction]) => {
          const usageCount = getUsageCount ? getUsageCount('distinctions', distinction.name) : 0;
          const isLimitReached = isUsageLimitReached && isUsageLimitReached('distinctions', distinction.name);
          const isClickable = !isLimitReached || additionalDieEffect;

          const availableOptions = getAvailableOptions(distinctionId, distinction.name);

          return (
            <div key={distinctionId} className="distinction-row">
              <h4 className="distinction-title">{getDistinctionTitle(distinctionId)}</h4>

              <div className="distinction-controls">
                <select
                  className="distinction-select"
                  value={distinction.name}
                  // onChange={(e) => handleNameChange(distinctionId, e.target.value)}
                  onChange={(e) => onDistinctionChange(distinctionId, { name: e.target.value })}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ª–∏—á–∏–µ...</option>
                  {availableOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>

                <div
                  className={`distinction-dice ${!isClickable ? 'dice-disabled' : ''}`}
                  onClick={() => handleDistinctionClick(distinctionId, distinction.name)}
                  title={
                    !distinction.name
                      ? '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ª–∏—á–∏–µ'
                      : !isClickable
                        ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                        : additionalDieEffect
                          ? '–≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª'
                          : `–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d8 –≤ –ø—É–ª (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usageCount}/3)`
                  }
                >
                  <DiceIcon
                    type="d8"
                    value="8"
                    clickable={isClickable && !!distinction.name}
                  />
                  {usageCount > 0 && (
                    <span className="usage-counter-small"> x {usageCount}</span>
                  )}
                </div>
              </div>

              {availableOptions.length === 1 && distinction.name && (
                <div className="distinction-warning">
                  ‚ö†Ô∏è –í—Å–µ –≥—Ä—É–ø–ø—ã –æ—Ç–ª–∏—á–∏–π —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
                </div>
              )}
            </div>
          );
        })}
      </div>
      <div className="distinction-hint">
        {additionalDieEffect
          ? 'üéØ –≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–æ–µ –æ—Ç–ª–∏—á–∏–µ'
          : 'üí° –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–ª–∏—á–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã, –¥—Ä—É–≥–∏–µ –æ—Ç–ª–∏—á–∏—è –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.'
        }
      </div>
    </div>
  );
};

export default DistinctionBlock;