import React from 'react';
import DiceIcon from './DiceIcon';

const DistinctionBlock = ({ distinctions, onDistinctionClick, onDistinctionChange, isCategoryAvailable }) => {
  const handleDistinctionClick = (distinctionName, diceType, category) => {
    if (isCategoryAvailable && !isCategoryAvailable('distinction')) {
      return;
    }
    onDistinctionClick(distinctionName, diceType, category);
  };

  const handleNameChange = (category, newName) => {
    onDistinctionChange(category, newName);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.target.blur();
    }
  };

  const isBlockAvailable = isCategoryAvailable ? isCategoryAvailable('distinction') : true;

  return (
    <div className={`block distinctions-block ${!isBlockAvailable ? 'category-used' : ''}`}>
      <h3>–û—Ç–ª–∏—á–∏—è</h3>
      <div className="distinctions-list">
        {Object.entries(distinctions).map(([category, distinction]) => (
          <div key={category} className="distinction-category">
            <h4 className="distinction-title">{getCategoryTitle(category)}</h4>
            <div className={`distinction-row ${!isBlockAvailable ? 'row-disabled' : ''}`}>
              <input
                type="text"
                className="distinction-input"
                value={distinction.name}
                onChange={(e) => handleNameChange(category, e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—É—é —á–µ—Ä—Ç—É..."
                maxLength={30}
                disabled={!isBlockAvailable}
              />
              
              <div className="distinction-dice">
                <div 
                  className={`distinction-dice-item ${!isBlockAvailable ? 'dice-disabled' : ''}`}
                  onClick={() => handleDistinctionClick(
                    distinction.name, 
                    'd8', 
                    `${getCategoryTitle(category)} (d8)`
                  )}
                  title={
                    !isBlockAvailable 
                      ? '–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–ª–∏—á–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞'
                      : '–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d8 –≤ –ø—É–ª'
                  }
                >
                  <DiceIcon 
                    type="d8" 
                    value="8"
                    clickable={isBlockAvailable}
                  />
                </div>
                
                <div 
                  className={`distinction-dice-item ${!isBlockAvailable ? 'dice-disabled' : ''}`}
                  onClick={() => handleDistinctionClick(
                    distinction.name, 
                    'd4', 
                    `${getCategoryTitle(category)} (d4)`
                  )}
                  title={
                    !isBlockAvailable 
                      ? '–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–ª–∏—á–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞'
                      : '–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d4 –≤ –ø—É–ª'
                  }
                >
                  <DiceIcon 
                    type="d4" 
                    value="4"
                    clickable={isBlockAvailable}
                  />
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      <div className="distinction-hint">
        {!isBlockAvailable 
          ? '‚ö° –û—Ç–ª–∏—á–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—É–ª–µ' 
          : 'üí° –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫—É–±–∞–º —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø—É–ª. –¢–µ–∫—Å—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.'
        }
      </div>
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const getCategoryTitle = (category) => {
  const titles = {
    'past': '–ü—Ä–æ—à–ª–æ–µ',
    'trait': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞',
    'value': '–¶–µ–Ω–Ω–æ—Å—Ç—å'
  };
  return titles[category] || category;
};

export default DistinctionBlock;