import React, { useState } from 'react';
import DiceIcon from './DiceIcon';

const ResourcesBlock = ({ resources, onResourceClick, onResourcesChange, getUsageCount, isUsageLimitReached, additionalDieEffect = false }) => {
    const [newResource, setNewResource] = useState('');

    const handleResourceClick = (resourceName, diceType) => {
        if (isUsageLimitReached && isUsageLimitReached('resource', resourceName) && !additionalDieEffect) {
            return;
        }
        onResourceClick(resourceName, diceType);
    };

    const handleAddResource = () => {
        if (newResource.trim() && Object.keys(resources).length < 10) {
            onResourcesChange('add', null, newResource.trim());
            setNewResource('');
        }
    };

    const handleRemoveResource = (id) => {
        onResourcesChange('remove', id);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            handleAddResource();
        }
    };

    const handleEditResource = (id, newName) => {
        onResourcesChange('edit', id, newName);
    };

    const canAddNew = Object.keys(resources).length < 10;

    return (
        <div className={`block resources-block ${additionalDieEffect ? 'bonus-mode' : ''}`}>
            <h3>–†–µ—Å—É—Ä—Å—ã</h3>

            <div className="resources-input-container">
                <input
                    type="text"
                    className="resource-input"
                    value={newResource}
                    onChange={(e) => setNewResource(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å..."
                    disabled={!canAddNew}
                    maxLength={30}
                />
                <button
                    className="add-resource-button"
                    onClick={handleAddResource}
                    disabled={!newResource.trim() || !canAddNew}
                    title={!canAddNew ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ä–µ—Å—É—Ä—Å–æ–≤' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å'}
                >
                    +
                </button>
            </div>

            <div className="resources-list">
                {Object.entries(resources).map(([id, resource]) => {
                    const usageCount = getUsageCount ? getUsageCount('resource', resource.name) : 0;
                    const isLimitReached = isUsageLimitReached && isUsageLimitReached('resource', resource.name);
                    const isClickable = !isLimitReached || additionalDieEffect;

                    return (
                        <div key={id} className={`resource-row ${!isClickable ? 'row-disabled' : ''}`}>
                            <input
                                type="text"
                                className="resource-name-input"
                                value={resource.name}
                                onChange={(e) => handleEditResource(id, e.target.value)}
                                onKeyPress={(e) => {
                                    if (e.key === 'Enter') e.target.blur();
                                }}
                                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞..."
                                maxLength={30}
                            />

                            <div className="resource-controls">
                                <div className="resource-usage">
                                    {usageCount > 0 && (
                                        <span className="usage-counter"> X{usageCount}</span>
                                    )}
                                </div>

                                <div
                                    className={`resource-dice ${!isClickable ? 'dice-disabled' : ''}`}
                                    onClick={() => handleResourceClick(resource.name, 'd6')}
                                    title={
                                        !isClickable
                                            ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
                                            : additionalDieEffect
                                                ? '–≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª'
                                                : `–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d6 –≤ –ø—É–ª (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usageCount}/3)`
                                    }
                                >
                                    <DiceIcon
                                        type="d6"
                                        value="6"
                                        clickable={isClickable}
                                    />
                                </div>

                                <button
                                    className="remove-resource-button"
                                    onClick={() => handleRemoveResource(id)}
                                    title="–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å"
                                >
                                    √ó
                                </button>
                            </div>
                        </div>
                    );
                })}

                {Object.keys(resources).length === 0 && (
                    <div className="no-resources-message">
                        –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                    </div>
                )}
            </div>

            <div className="resources-counter">
                {Object.keys(resources).length}/10 —Ä–µ—Å—É—Ä—Å–æ–≤
            </div>

            <div className="resources-hint">
                {additionalDieEffect
                    ? 'üéØ –≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ä–µ—Å—É—Ä—Å'
                    : 'üí° –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫—É–±–∞–º —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø—É–ª. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ 10 —Ä–µ—Å—É—Ä—Å–æ–≤.'
                }
            </div>
        </div>
    );
};

export default ResourcesBlock;