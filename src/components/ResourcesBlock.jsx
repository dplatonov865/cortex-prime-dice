import React, { useState } from 'react';
import DiceIcon from './DiceIcon';

const ResourcesBlock = ({ resources, onResourceClick, onResourcesChange, isCategoryAvailable, additionalDieEffect = false }) => {
    const [newResource, setNewResource] = useState('');

    const handleResourceClick = (resourceName, diceType) => {
        if (isCategoryAvailable && !isCategoryAvailable('resource') && !additionalDieEffect) {
            return;
        }
        onResourceClick(resourceName, diceType);
    };

    const handleAddResource = () => {
        if (newResource.trim() && Object.keys(resources).length < 10 &&
            ((isCategoryAvailable && isCategoryAvailable('resource')) || additionalDieEffect)) {
            onResourcesChange('add', null, newResource.trim());
            setNewResource('');
        }
    };

    const handleRemoveResource = (id) => {
        onResourcesChange('remove', id);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            handleAddResource();
        }
    };

    const handleEditResource = (id, newName) => {
        onResourcesChange('edit', id, newName);
    };

    const isBlockAvailable = isCategoryAvailable ? isCategoryAvailable('resource') : true;
    const finalAvailability = isBlockAvailable || additionalDieEffect;
    const canAddNew = finalAvailability && Object.keys(resources).length < 10;

    return (
        <div className={`block resources-block ${!finalAvailability ? 'category-used' : ''} ${additionalDieEffect ? 'bonus-mode' : ''}`}>
            <h3>–†–µ—Å—É—Ä—Å—ã</h3>

            <div className="resources-input-container">
                <input
                    type="text"
                    className="resource-input"
                    value={newResource}
                    onChange={(e) => setNewResource(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å..."
                    disabled={!canAddNew}
                    maxLength={30}
                />
                <button
                    className="add-resource-button"
                    onClick={handleAddResource}
                    disabled={!newResource.trim() || !canAddNew}
                    title={!canAddNew ? '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å - –Ω–∞–±–æ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å'}
                >
                    +
                </button>
            </div>

            <div className="resources-list">
                {Object.entries(resources).map(([id, resource]) => (
                    <div key={id} className={`resource-row ${!finalAvailability ? 'row-disabled' : ''}`}>
                        <input
                            type="text"
                            className="resource-name-input"
                            value={resource.name}
                            onChange={(e) => handleEditResource(id, e.target.value)}
                            onKeyPress={(e) => {
                                if (e.key === 'Enter') e.target.blur();
                            }}
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞..."
                            maxLength={30}
                            disabled={!finalAvailability}
                        />

                        <div className="resource-controls">
                            <div
                                className={`resource-dice ${!finalAvailability ? 'dice-disabled' : ''}`}
                                onClick={() => handleResourceClick(resource.name, 'd6')}
                                title={
                                    !finalAvailability
                                        ? '–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ—Å—É—Ä—Å –∏–∑ —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞'
                                        : additionalDieEffect
                                            ? '–≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª'
                                            : '–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å d6 –≤ –ø—É–ª'
                                }
                            >
                                <DiceIcon
                                    type="d6"
                                    value="6"
                                    clickable={finalAvailability}
                                />
                            </div>

                            <button
                                className="remove-resource-button"
                                onClick={() => handleRemoveResource(id)}
                                title="–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å"
                                disabled={!finalAvailability}
                            >
                                √ó
                            </button>
                        </div>
                    </div>
                ))}

                {Object.keys(resources).length === 0 && (
                    <div className="no-resources-message">
                        –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                    </div>
                )}
            </div>

            <div className="resources-counter">
                {Object.keys(resources).length}/10 —Ä–µ—Å—É—Ä—Å–æ–≤
            </div>

            <div className="resources-hint">
                {additionalDieEffect
                    ? 'üéØ –≠—Ñ—Ñ–µ–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ä–µ—Å—É—Ä—Å'
                    : !isBlockAvailable
                        ? '‚ö° –†–µ—Å—É—Ä—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—É–ª–µ'
                        : 'üí° –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫—É–±–∞–º —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø—É–ª. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ 10 —Ä–µ—Å—É—Ä—Å–æ–≤.'
                }
            </div>
        </div>
    );
};

export default ResourcesBlock;