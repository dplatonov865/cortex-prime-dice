import React from 'react';
import DiceIcon from './DiceIcon';

const ResultsBlock = ({ 
  rollResults, 
  selectedDice, 
  result, 
  effectDie, 
  rollHistory, 
  onResultDiceClick,
  canSelectDice,
  maxSelectedDice
}) => {
  return (
    <div className="bottom-block results-block">
      <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–∞</h3>
      
      {rollResults.length === 0 ? (
        <p className="no-results-message">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤</p>
      ) : (
        <div className="current-results">
          {/* –°—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫—É–±–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∞ */}
          <ResultStats 
            result={result} 
            effectDie={effectDie} 
            selectedCount={selectedDice.length}
            maxSelected={maxSelectedDice}
          />
          
          {/* –í—ã–ø–∞–≤—à–∏–µ –∫—É–±—ã */}
          <ResultsSection 
            rollResults={rollResults}
            selectedDice={selectedDice}
            onResultDiceClick={onResultDiceClick}
            canSelectDice={canSelectDice}
            maxSelectedDice={maxSelectedDice}
          />

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
          <div className="results-hint">
            üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ {maxSelectedDice} –∫—É–±–æ–≤ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—É–º–º—ã. –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫—É–±–∞–º —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
            {selectedDice.length >= maxSelectedDice && (
              <div className="limit-warning">
                ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {maxSelectedDice} –∫—É–±–∞
              </div>
            )}
          </div>
        </div>
      )}
      
      {/* –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤ */}
      <RollHistory rollHistory={rollHistory} />
    </div>
  );
};

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const ResultStats = ({ result, effectDie, selectedCount, maxSelected }) => (
  <div className="result-stats">
    <div className="result-stat">
      <div className="result-stat-header">
        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong>
        <span className="selection-counter">
          {selectedCount}/{maxSelected}
        </span>
      </div>
      <span className="result-value">{result}</span>
    </div>
    <div className="result-stat">
      <strong>–ö—É–± —ç—Ñ—Ñ–µ–∫—Ç–∞:</strong>
      <DiceIcon 
        type={effectDie} 
        value={effectDie.replace('d', '')}
        clickable={false}
      />
    </div>
  </div>
);

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
const ResultsSection = ({ 
  rollResults, 
  selectedDice, 
  onResultDiceClick, 
  canSelectDice,
  maxSelectedDice 
}) => (
  <div className="results-section">
    <h4>–í—ã–ø–∞–≤—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</h4>
    <div className="results-dice">
      {rollResults.map(dice => (
        <ResultDiceItem
          key={dice.id}
          dice={dice}
          isSelected={selectedDice.includes(dice.id)}
          canSelect={canSelectDice ? canSelectDice(dice.id) : true}
          isLimitReached={selectedDice.length >= maxSelectedDice}
          onClick={() => onResultDiceClick(dice.id)}
        />
      ))}
    </div>
  </div>
);

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const ResultDiceItem = ({ dice, isSelected, canSelect, isLimitReached, onClick }) => {
  const isInactive = dice.isOne || dice.rolledValue === 0;
  const isDisabled = !isInactive && !canSelect;
  
  return (
    <div 
      className={`result-dice-item ${isSelected ? 'selected' : ''} ${isInactive ? 'inactive' : ''} ${isDisabled ? 'disabled' : ''}`}
      onClick={onClick}
      title={getDiceTitle(isInactive, isSelected, isDisabled, isLimitReached, dice)}
    >
      <div className="dice-content">
        <DiceIcon 
          type={dice.type} 
          value={dice.rolledValue}
          clickable={!isInactive && !isDisabled}
        />
        <div className="dice-name">{dice.name}</div>
      </div>
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */}
      {isSelected && <div className="selected-indicator">‚úì</div>}
      {isInactive && <div className="inactive-indicator">‚úó</div>}
      {isDisabled && !isSelected && <div className="disabled-indicator">üîí</div>}
    </div>
  );
};

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ—Å–∫–æ–≤
const RollHistory = ({ rollHistory }) => {
  if (rollHistory.length === 0) return null;

  return (
    <div className="roll-history-section">
      <h4>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤</h4>
      <div className="history-list">
        {rollHistory.map(roll => (
          <div key={roll.id} className="history-item">
            <span className="history-time">{roll.timestamp}</span>
            <div className="history-dice">
              {roll.results.map((dice, index) => (
                <div key={index} className="history-dice-item">
                  <DiceIcon 
                    type={dice.type} 
                    value={dice.rolledValue}
                    clickable={false}
                  />
                  <span className="history-dice-name">{dice.name}</span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
const getDiceTitle = (isInactive, isSelected, isDisabled, isLimitReached, dice) => {
  if (isInactive) return `${dice.name}: –≤—ã–ø–∞–ª–∞ 1 –∏–ª–∏ —Ä–∞–Ω–≥ 0 - –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å`;
  if (isSelected) return `${dice.name}: –∫–ª–∏–∫ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`;
  if (isDisabled) return `${dice.name}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 2 –∫—É–±–∞`;
  return `${dice.name}: –∫–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç`;
};

export default ResultsBlock;