import React from 'react';
import DiceIcon from './DiceIcon';

const ResultsBlock = ({
  rollResults,
  selectedDice,
  result,
  effectDice,
  rollHistory,
  onResultDiceClick,
  onBoostResultSelection,
  canSelectDice,
  maxSelectedDice,
  activeEffect
}) => {

  const handleDiceClick = (diceId) => {
    if (activeEffect === 'boost_result') {
      onBoostResultSelection(diceId);
    } else {
      onResultDiceClick(diceId); // boost_effect –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    }
  };

  const isBoostResultActive = activeEffect === 'boost_result';

  return (
    <div className={`bottom-block results-block ${isBoostResultActive ? 'boost-result-active' : ''}`}>
      <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–∞ {isBoostResultActive && '‚ö°'}</h3>

      {rollResults.length === 0 ? (
        <p className="empty-pool-message">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤</p>
      ) : (
        <div className="current-results">
          <ResultStats
            result={result}
            effectDice={effectDice} // ‚Üê –ü–ï–†–ï–î–ê–¢–¨ effectDice
            selectedCount={selectedDice.length}
            maxSelected={maxSelectedDice}
            isBoostResultActive={isBoostResultActive}
          />

          <ResultsSection
            rollResults={rollResults}
            selectedDice={selectedDice}
            onDiceClick={handleDiceClick}
            canSelectDice={canSelectDice}
            maxSelectedDice={maxSelectedDice}
            activeEffect={activeEffect}
            effectDice={effectDice} // ‚Üê –ü–ï–†–ï–î–ê–¢–¨ effectDice
          />

          <div className="results-hint">
            {getResultsHint(activeEffect, selectedDice.length, maxSelectedDice)}
          </div>
        </div>
      )}

      <RollHistory rollHistory={rollHistory} />
    </div>
  );
};

const ResultStats = ({ result, effectDice, selectedCount, maxSelected, isBoostResultActive }) => (
  <div className="result-stats">
    <div className="result-stat">
      <div className="result-stat-header">
        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong>
        {!isBoostResultActive && (
          <span className="selection-counter">
            {selectedCount}/{maxSelected}
          </span>
        )}
      </div>
      <span className={`result-value ${isBoostResultActive ? 'boost-highlight' : ''}`}>
        {result}
        {isBoostResultActive && ' ‚ö°'}
      </span>
    </div>
    <div className="result-stat">
      <strong>–ö—É–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∞:</strong>
      <div className="effect-dice-container">
        {effectDice && effectDice.map((effectDie, index) => ( // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –ü–†–û–í–ï–†–ö–£ effectDice
          <DiceIcon
            key={index}
            type={effectDie}
            value={effectDie.replace('d', '')}
            clickable={false}
          />
        ))}
      </div>
    </div>

    {isBoostResultActive && (
      <div className="boost-result-notice">
        üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–± –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      </div>
    )}
  </div>
);

const ResultsSection = ({
  rollResults,
  selectedDice,
  onDiceClick,
  canSelectDice,
  maxSelectedDice,
  activeEffect,
  effectDice // ‚Üê –î–û–ë–ê–í–ò–¢–¨ effectDice
}) => {
  const isBoostResultActive = activeEffect === 'boost_result';

  return (
    <div className="results-section">
      <h4>–í—ã–ø–∞–≤—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</h4>
      <div className="dice-pool">
        <div className="dice-pool-list">
          {rollResults.map(dice => (
            <ResultDiceItem
              key={dice.id}
              dice={dice}
              isSelected={selectedDice.includes(dice.id)}
              canSelect={canSelectDice ? canSelectDice(dice.id) : true}
              isLimitReached={selectedDice.length >= maxSelectedDice}
              activeEffect={activeEffect}
              effectDice={effectDice} // ‚Üê –ü–ï–†–ï–î–ê–¢–¨ effectDice
              onClick={() => onDiceClick(dice.id)}
            />
          ))}
        </div>
      </div>
    </div>
  );
};


const ResultDiceItem = ({ dice, isSelected, canSelect, isLimitReached, activeEffect, effectDice, onClick }) => {
  const isInactive = dice.isOne || dice.rolledValue === 0;
  const isBoostResultActive = activeEffect === 'boost_result';

  // –í —Ä–µ–∂–∏–º–µ boost_result –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏–º–∏—Ç)
  const isBoostResultSelectable = isBoostResultActive && !isInactive && !isSelected;

  // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
  const isDisabled = !isBoostResultActive && !isInactive && !canSelect;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫—É–± —É–∂–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–º
  const isCurrentEffect = effectDice && effectDice.includes(dice.type);

  return (
    <div
      className={`pool-dice-item ${isSelected ? 'selected' : ''} ${isInactive ? 'inactive' : ''} ${isDisabled ? 'disabled' : ''} ${isBoostResultSelectable ? 'boost-selectable' : ''}`}
      onClick={onClick}
      title={getDiceTitle(isInactive, isSelected, isDisabled, isLimitReached, activeEffect, isCurrentEffect)}
    >
      <DiceIcon
        type={dice.type}
        value={dice.rolledValue}
        clickable={!isInactive && (!isDisabled || isBoostResultSelectable)}
      />
      <div className="dice-info-small">
        <span className="dice-category">
          {getCategoryLabel(dice.category)}
        </span>
        <span className="dice-name">{dice.name}</span>
        {isCurrentEffect && <span className="current-effect-indicator">üéØ</span>}
      </div>
      {isSelected && <div className="selected-indicator">‚úì</div>}
      {isInactive && <div className="inactive-indicator">‚úó</div>}
      {isDisabled && !isSelected && !isBoostResultActive && <div className="disabled-indicator">üîí</div>}
      {isBoostResultSelectable && <div className="boost-indicator">üìä</div>}
    </div>
  );
};


const RollHistory = ({ rollHistory }) => {
  if (rollHistory.length === 0) return null;

  return (
    <div className="roll-history-section">
      <h4>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤</h4>
      <div className="history-list">
        {rollHistory.map(roll => (
          <div key={roll.id} className="history-item">
            <span className="history-time">{roll.timestamp}</span>
            <div className="history-dice">
              {roll.results.map((dice, index) => (
                <DiceIcon
                  key={index}
                  type={dice.type}
                  value={dice.rolledValue}
                  clickable={false}
                />
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const getCategoryLabel = (category) => {
  switch (category) {
    case 'attribute': return '–ê—Ç—Ä–∏–±—É—Ç';
    case 'role': return '–†–æ–ª—å';
    case 'complication': return '–û—Å–ª–æ–∂–Ω–µ–Ω–∏–µ';
    case 'specialty': return '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å';
    default:
      if (category.startsWith('distinction:')) {
        return '–û—Ç–ª–∏—á–∏–µ';
      }
      return category;
  }
};

const getDiceTitle = (isInactive, isSelected, isDisabled, isLimitReached, activeEffect, isCurrentEffect) => {
  if (activeEffect === 'boost_result') {
    if (isInactive) return '–í—ã–ø–∞–ª–∞ 1 –∏–ª–∏ —Ä–∞–Ω–≥ 0 - –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å';
    if (isSelected) return '–£–∂–µ –≤—ã–±—Ä–∞–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ';
    return '–ö–ª–∏–∫ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ';
  }
  
  if (isInactive) return '–í—ã–ø–∞–ª–∞ 1 –∏–ª–∏ —Ä–∞–Ω–≥ 0 - –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å';
  if (isSelected) return '–ö–ª–∏–∫ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
  if (isCurrentEffect) return '–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∫—É–± —ç—Ñ—Ñ–µ–∫—Ç–∞';
  if (isDisabled) return `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 2 –∫—É–±–∞. –£–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç.`;
  return '–ö–ª–∏–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
};

const getResultsHint = (activeEffect, selectedCount, maxSelectedDice) => {
  if (activeEffect === 'boost_result') {
    return 'üí° –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –∫—É–± (–∫—Ä–æ–º–µ 1) —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–± —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞.';
  }

  if (activeEffect === 'boost_effect') {
    return 'üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–± –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞. –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –∫—É–±—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –∫—É–± —ç—Ñ—Ñ–µ–∫—Ç–∞.';
  }

  return `üí° –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ ${maxSelectedDice} –∫—É–±–æ–≤ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—É–º–º—ã. –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫—É–±–∞–º —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.${selectedCount >= maxSelectedDice ? '\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 2 –∫—É–±–∞' : ''
    }`;
};

export default ResultsBlock;