import React from 'react';
import DiceIcon from './DiceIcon';

const ResultsBlock = ({ 
  rollResults, 
  selectedDice, 
  result, 
  effectDie, 
  rollHistory, 
  onResultDiceClick 
}) => {
  return (
    <div className="bottom-block results-block">
      <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–∞</h3>
      
      {rollResults.length === 0 ? (
        <p className="no-results-message">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤</p>
      ) : (
        <div className="current-results">
          {/* –°—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫—É–±–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∞ */}
          <ResultStats result={result} effectDie={effectDie} />
          
          {/* –í—ã–ø–∞–≤—à–∏–µ –∫—É–±—ã */}
          <ResultsSection 
            rollResults={rollResults}
            selectedDice={selectedDice}
            onResultDiceClick={onResultDiceClick}
          />

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
          <div className="results-hint">
            üí° –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫—É–±–∞–º —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          </div>
        </div>
      )}
      
      {/* –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤ */}
      <RollHistory rollHistory={rollHistory} />
    </div>
  );
};

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const ResultStats = ({ result, effectDie }) => (
  <div className="result-stats">
    <div className="result-stat">
      <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong>
      <span className="result-value">{result}</span>
    </div>
    <div className="result-stat">
      <strong>–ö—É–± —ç—Ñ—Ñ–µ–∫—Ç–∞:</strong>
      <DiceIcon 
        type={effectDie} 
        value={effectDie.replace('d', '')}
        clickable={false}
      />
    </div>
  </div>
);

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
const ResultsSection = ({ rollResults, selectedDice, onResultDiceClick }) => (
  <div className="results-section">
    <h4>–í—ã–ø–∞–≤—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</h4>
    <div className="results-dice">
      {rollResults.map(dice => (
        <ResultDiceItem
          key={dice.id}
          dice={dice}
          isSelected={selectedDice.includes(dice.id)}
          onClick={() => onResultDiceClick(dice.id)}
        />
      ))}
    </div>
  </div>
);

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫—É–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const ResultDiceItem = ({ dice, isSelected, onClick }) => {
  const isInactive = dice.isOne || dice.rolledValue === 0;
  
  return (
    <div 
      className={`result-dice-item ${isSelected ? 'selected' : ''} ${isInactive ? 'inactive' : ''}`}
      onClick={onClick}
      title={getDiceTitle(isInactive, isSelected)}
    >
      <DiceIcon 
        type={dice.type} 
        value={dice.rolledValue}
        clickable={!isInactive}
      />
      <div className="dice-info">
        <div className="dice-category-small">
          {getCategoryLabel(dice.category)}
        </div>
        <div className="dice-name">{dice.name}</div>
        <div className="dice-roll">{dice.rolledValue}</div>
        {isSelected && <div className="selected-indicator">‚úì –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ</div>}
        {isInactive && <div className="inactive-indicator">
          {dice.rolledValue === 0 ? '‚úó –†–∞–Ω–≥ 0' : '‚úó –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
        </div>}
      </div>
    </div>
  );
};

// –ü–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ—Å–∫–æ–≤
const RollHistory = ({ rollHistory }) => {
  if (rollHistory.length === 0) return null;

  return (
    <div className="roll-history-section">
      <h4>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ—Å–∫–æ–≤</h4>
      <div className="history-list">
        {rollHistory.map(roll => (
          <div key={roll.id} className="history-item">
            <span className="history-time">{roll.timestamp}</span>
            <div className="history-dice">
              {roll.results.map((dice, index) => (
                <DiceIcon 
                  key={index}
                  type={dice.type} 
                  value={dice.rolledValue}
                  clickable={false}
                />
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getCategoryLabel = (category) => {
  switch (category) {
    case 'attribute': return '–ê—Ç—Ä–∏–±—É—Ç';
    case 'role': return '–†–æ–ª—å';
    case 'complication': return '–û—Å–ª–æ–∂–Ω–µ–Ω–∏–µ';
    default: return category;
  }
};

const getDiceTitle = (isInactive, isSelected) => {
  if (isInactive) return '–í—ã–ø–∞–ª–∞ 1 –∏–ª–∏ —Ä–∞–Ω–≥ 0 - –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å';
  return `–ö–ª–∏–∫ –¥–ª—è ${isSelected ? '–∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑' : '–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤'} —Ä–µ–∑—É–ª—å—Ç–∞—Ç`;
};

export default ResultsBlock;